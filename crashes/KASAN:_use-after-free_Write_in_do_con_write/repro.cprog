// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <dirent.h>
#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <signal.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/prctl.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <time.h>
#include <unistd.h>

static void sleep_ms(uint64_t ms)
{
  usleep(ms * 1000);
}

static uint64_t current_time_ms(void)
{
  struct timespec ts;
  if (clock_gettime(CLOCK_MONOTONIC, &ts))
    exit(1);
  return (uint64_t)ts.tv_sec * 1000 + (uint64_t)ts.tv_nsec / 1000000;
}

static bool write_file(const char* file, const char* what, ...)
{
  char buf[1024];
  va_list args;
  va_start(args, what);
  vsnprintf(buf, sizeof(buf), what, args);
  va_end(args);
  buf[sizeof(buf) - 1] = 0;
  int len = strlen(buf);
  int fd = open(file, O_WRONLY | O_CLOEXEC);
  if (fd == -1)
    return false;
  if (write(fd, buf, len) != len) {
    int err = errno;
    close(fd);
    errno = err;
    return false;
  }
  close(fd);
  return true;
}

static long syz_open_dev(volatile long a0, volatile long a1, volatile long a2)
{
  if (a0 == 0xc || a0 == 0xb) {
    char buf[128];
    sprintf(buf, "/dev/%s/%d:%d", a0 == 0xc ? "char" : "block", (uint8_t)a1,
            (uint8_t)a2);
    return open(buf, O_RDWR, 0);
  } else {
    char buf[1024];
    char* hash;
    strncpy(buf, (char*)a0, sizeof(buf) - 1);
    buf[sizeof(buf) - 1] = 0;
    while ((hash = strchr(buf, '#'))) {
      *hash = '0' + (char)(a1 % 10);
      a1 /= 10;
    }
    return open(buf, a2, 0);
  }
}

static void kill_and_wait(int pid, int* status)
{
  kill(-pid, SIGKILL);
  kill(pid, SIGKILL);
  for (int i = 0; i < 100; i++) {
    if (waitpid(-1, status, WNOHANG | __WALL) == pid)
      return;
    usleep(1000);
  }
  DIR* dir = opendir("/sys/fs/fuse/connections");
  if (dir) {
    for (;;) {
      struct dirent* ent = readdir(dir);
      if (!ent)
        break;
      if (strcmp(ent->d_name, ".") == 0 || strcmp(ent->d_name, "..") == 0)
        continue;
      char abort[300];
      snprintf(abort, sizeof(abort), "/sys/fs/fuse/connections/%s/abort",
               ent->d_name);
      int fd = open(abort, O_WRONLY);
      if (fd == -1) {
        continue;
      }
      if (write(fd, abort, 1) < 0) {
      }
      close(fd);
    }
    closedir(dir);
  } else {
  }
  while (waitpid(-1, status, __WALL) != pid) {
  }
}

static void setup_test()
{
  prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0);
  setpgrp();
  write_file("/proc/self/oom_score_adj", "1000");
}

static void execute_one(void);

#define WAIT_FLAGS __WALL

static void loop(void)
{
  int iter = 0;
  for (;; iter++) {
    int pid = fork();
    if (pid < 0)
      exit(1);
    if (pid == 0) {
      setup_test();
      execute_one();
      exit(0);
    }
    int status = 0;
    uint64_t start = current_time_ms();
    for (;;) {
      if (waitpid(-1, &status, WNOHANG | WAIT_FLAGS) == pid)
        break;
      sleep_ms(1);
      if (current_time_ms() - start < 5 * 1000)
        continue;
      kill_and_wait(pid, &status);
      break;
    }
  }
}

uint64_t r[3] = {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff};

void execute_one(void)
{
  intptr_t res = 0;
  res = -1;
  res = syz_open_dev(0xc, 4, 1);
  if (res != -1)
    r[0] = res;
  res = syscall(__NR_dup2, r[0], r[0]);
  if (res != -1)
    r[1] = res;
  *(uint64_t*)0x20000040 = 0x200010c0;
  memcpy(
      (void*)0x200010c0,
      "\x24\xde\x74\xa6\x7f\x51\xfc\x8d\x08\xa7\x27\xca\xcc\xd6\xcc\x17\xd9\x52"
      "\x8a\x96\x9c\x11\x6e\x43\x80\xcb\x88\xac\xfa\xb7\x69\x2e\xd0\xd4\xa3\x3f"
      "\x61\x62\x17\x98\xda\x3f\x08\x4c\x53\xcb\x5e\xfe\x4f\x4b\x68\x07\x13\xd4"
      "\x96\xc2\x06\x2e\x86\x42\xb1\x67\xf5\xd0\x54\xa4\x0e\xad\xda\xda\x41\x4c"
      "\xbe\xfb\x06\x0f\x2b\xf1\x34\xd0\x34\x70\x22\x9a\x60\xdb\x19\xc7\xa7\x4e"
      "\x00\x54\x8f\x4b\x33\xec\x1d\x2d\xfa\xb8\xbd\x35\xbb\x91\xc4\x4f\x85\x89"
      "\x0f\x51\x2e\xdd\xed\x91\x49\x68\xf0\x70\xe7\x80\xdc\x6c\xa5\xcd\x3f\xac"
      "\xc8\x20\x67\x18\x9f\xe6\x3d\x5a\x45\x10\xf8\x2f\x8d\x77\xc5\xc3\xa6\xec"
      "\xda\x95\xce\xc9\xad\xf4\x66\xe0\x8f\x80\x95\xad\x97\x64\xfd\xca\xae\x69"
      "\xcf\x69\xe4\x5f\x50\x33\x18\x7a\x8b\xdf\x42\x1d\x60\x13\x2e\xda\x6c\xff"
      "\x75\x23\x55\x26\x88\xd1\x55\xa7\xa5\xcd\xe3\x4d\xf6\x02\xb5\xfd\xfc\xea"
      "\x30\xbd\x04\xba\x74\x49\x5f\xad\xe0\xe8\x58\x29\x9d\xe5\x6b\xcb\x99\x79"
      "\x97\xd7\x23\x0c\x1e\x0c\x2a\xf1\xb2\x20\xb7\xac\xf1\xd5\x56\x64\xa1\x5b"
      "\x14\x00\xc7\xaa\xeb\x44\x36\x54\xb8\x17\x0a\xa3\xd0\xa0\x33\x98\x63\xc1"
      "\x94\x1e\xff\x4f\xfb\xf9\xe4\x4c\x69\x4b\x4f\xf9\x29\x5c\xc1\xb3\xb3\x38"
      "\x8b\xd9\xf4\x73\x07\x9c\x7f\x61\xcc\x7d\xa9\x2d\x56\xd2\x0b\x81\xcc\x3e"
      "\x49\xac\x01\x2f\xf7\x9a\x34\x49\xd4\x3c\xfe\x93\xb5\x67\x48\xa8\xc4\x91"
      "\x9f\x78\x8c\xbd\xac\x02\xb4\xc1\xc9\x61\xf2\xcb\x0d\x1a\x8d\x5a\x9a\x0e"
      "\x16\x4d\x44\x4d\x5a\x1c\xcf\x25\xf2\x40\x97\x94\x71\xcc\x99\xca\x6a\x8c"
      "\x46\x5c\xb2\x24\xb1\x1a\x67\xef\x8d\x7d\xa2\x56\xbe\x47\xa1\x5f\xfb\x92"
      "\xf2\x32\x62\x38\x72\x85\xf9\x19\xc2\x55\xf1\xb1\x7f\x8e\xb1\xab\x90\xed"
      "\x4a\x71\xdc\x58\x99\xa3\x22\x6b\x09\x7f\xc2\xfe\x71\x82\xb8\x84\x59\x46"
      "\x45\x58\x84\x0e\xc6\x42\x9f\xd5\x38\xbb\xfc\xf6\x91\xee\x26\xae\x5b\xce"
      "\xbf\x84\x77\xcb\x04\xc2\xf4\x1a\x4a\xee\x6c\xda\xaf\x67\xb5\x56\x42\x13"
      "\x4c\xe0\x4b\x54\x77\x1a\xa0\x33\x61\xe4\x9a\xa5\x98\xe9\xbb\x2c\x70\x5e"
      "\x23\x3b\xa5\xd4\x86\x83\x70\x62\x3c\x17\x62\xbd\x44\xe1\x9e\x33\x13\xc7"
      "\x5e\xb8\x50\xef\x12\x69\xe2\x6a\x96\x81\x7e\x5c\x7e\x64\xbe\x63\x1d\xf7"
      "\xdd\xd9\x30\x38\x2d\x30\xc4\xe4\xe5\x94\xde\x3d\x64\xe5\x95\x1d\x08\xd8"
      "\x45\xc4\x19\x76\xaf\xed\x28\x77\x57\xcb\xaa\x99\x4d\xfe\x0e\xca\x48\xb6"
      "\x02\xb3\xa3\x0b\x0a\x9a\x52\xf6\x14\xb4\x64\x69\x2f\xa0\xbc\xa4\x9a\x5c"
      "\x9a\x6d\xe3\xb5\x72\xb3\xdb\xff\xb1\xdd\xf5\x21\xd5\x22\x90\x71\x96\xe2"
      "\xf1\x33\x9b\x58",
      562);
  *(uint64_t*)0x20000048 = 0x232;
  syscall(__NR_writev, r[1], 0x20000040ul, 1ul);
  res = -1;
  res = syz_open_dev(0xc, 4, 0x14);
  if (res != -1)
    r[2] = res;
  *(uint16_t*)0x20000000 = 0x401;
  *(uint16_t*)0x20000002 = 0x401;
  *(uint16_t*)0x20000004 = 0x401;
  syscall(__NR_ioctl, r[2], 0x5609, 0x20000000ul);
}
int main(void)
{
  syscall(__NR_mmap, 0x1ffff000ul, 0x1000ul, 0ul, 0x32ul, -1, 0ul);
  syscall(__NR_mmap, 0x20000000ul, 0x1000000ul, 7ul, 0x32ul, -1, 0ul);
  syscall(__NR_mmap, 0x21000000ul, 0x1000ul, 0ul, 0x32ul, -1, 0ul);
  loop();
  return 0;
}
