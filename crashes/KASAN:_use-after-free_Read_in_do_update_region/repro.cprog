// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <dirent.h>
#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <signal.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/prctl.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <time.h>
#include <unistd.h>

static void sleep_ms(uint64_t ms)
{
  usleep(ms * 1000);
}

static uint64_t current_time_ms(void)
{
  struct timespec ts;
  if (clock_gettime(CLOCK_MONOTONIC, &ts))
    exit(1);
  return (uint64_t)ts.tv_sec * 1000 + (uint64_t)ts.tv_nsec / 1000000;
}

static bool write_file(const char* file, const char* what, ...)
{
  char buf[1024];
  va_list args;
  va_start(args, what);
  vsnprintf(buf, sizeof(buf), what, args);
  va_end(args);
  buf[sizeof(buf) - 1] = 0;
  int len = strlen(buf);
  int fd = open(file, O_WRONLY | O_CLOEXEC);
  if (fd == -1)
    return false;
  if (write(fd, buf, len) != len) {
    int err = errno;
    close(fd);
    errno = err;
    return false;
  }
  close(fd);
  return true;
}

static long syz_open_dev(volatile long a0, volatile long a1, volatile long a2)
{
  if (a0 == 0xc || a0 == 0xb) {
    char buf[128];
    sprintf(buf, "/dev/%s/%d:%d", a0 == 0xc ? "char" : "block", (uint8_t)a1,
            (uint8_t)a2);
    return open(buf, O_RDWR, 0);
  } else {
    char buf[1024];
    char* hash;
    strncpy(buf, (char*)a0, sizeof(buf) - 1);
    buf[sizeof(buf) - 1] = 0;
    while ((hash = strchr(buf, '#'))) {
      *hash = '0' + (char)(a1 % 10);
      a1 /= 10;
    }
    return open(buf, a2, 0);
  }
}

static void kill_and_wait(int pid, int* status)
{
  kill(-pid, SIGKILL);
  kill(pid, SIGKILL);
  for (int i = 0; i < 100; i++) {
    if (waitpid(-1, status, WNOHANG | __WALL) == pid)
      return;
    usleep(1000);
  }
  DIR* dir = opendir("/sys/fs/fuse/connections");
  if (dir) {
    for (;;) {
      struct dirent* ent = readdir(dir);
      if (!ent)
        break;
      if (strcmp(ent->d_name, ".") == 0 || strcmp(ent->d_name, "..") == 0)
        continue;
      char abort[300];
      snprintf(abort, sizeof(abort), "/sys/fs/fuse/connections/%s/abort",
               ent->d_name);
      int fd = open(abort, O_WRONLY);
      if (fd == -1) {
        continue;
      }
      if (write(fd, abort, 1) < 0) {
      }
      close(fd);
    }
    closedir(dir);
  } else {
  }
  while (waitpid(-1, status, __WALL) != pid) {
  }
}

static void setup_test()
{
  prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0);
  setpgrp();
  write_file("/proc/self/oom_score_adj", "1000");
}

static void execute_one(void);

#define WAIT_FLAGS __WALL

static void loop(void)
{
  int iter = 0;
  for (;; iter++) {
    int pid = fork();
    if (pid < 0)
      exit(1);
    if (pid == 0) {
      setup_test();
      execute_one();
      exit(0);
    }
    int status = 0;
    uint64_t start = current_time_ms();
    for (;;) {
      if (waitpid(-1, &status, WNOHANG | WAIT_FLAGS) == pid)
        break;
      sleep_ms(1);
      if (current_time_ms() - start < 5 * 1000)
        continue;
      kill_and_wait(pid, &status);
      break;
    }
  }
}

uint64_t r[2] = {0xffffffffffffffff, 0xffffffffffffffff};

void execute_one(void)
{
  intptr_t res = 0;
  res = -1;
  res = syz_open_dev(0xc, 4, 1);
  if (res != -1)
    r[0] = res;
  *(uint64_t*)0x20001300 = 0x20000300;
  memcpy(
      (void*)0x20000300,
      "\x5c\x36\x10\x17\xfb\x78\xe7\xa8\xcb\xd3\xd4\x77\xfe\x9d\xad\xad\x4d\xf0"
      "\x3e\xee\x65\x8e\x02\xde\x1d\xfb\xf5\xa2\x8e\xd2\x51\x1d\xdd\x0c\x70\xc3"
      "\xd0\x15\x47\x60\xd9\x28\xf1\xa5\x89\xc3\x10\x8d\xec\x5f\x31\x01\x70\xb9"
      "\x83\x4a\x50\x7a\x83\x7e\xbf\xb7\xf9\x6f\xe6\x03\x81\x76\xa8\x77\xb4\x21"
      "\xb6\xba\xa2\xd7\x66\xf2\xb2\xda\x7b\x28\xfe\x31\x27\x89\xbe\xab\x7f\x51"
      "\xf0\xad\x01\xdf\x25\xa4\xcd\xce\x8c\x68\x7f\x1f\xf8\x83\x17\x07\x12\x10"
      "\xa6\x3f\xd6\x6a\x6b\xfe\x8b\x73\x09\xf4\xa0\xb3\xa9\xb8\xf9\x96\x79\x49"
      "\xf0\xf4\xf2\x0a\xd3\x3a\x1c\xab\xb5\x31\xed\x37\xf6\x27\x68\x19\x36\xbb"
      "\x55\x93\xcb\x18\x6f\xb6\x82\x52\x7e\xc7\x71\xa0\x76\x16\xe4\x31\x34\xc1"
      "\xae\x95\x0f\x27\x53\x3c\x75\xf8\x2f\x8e\x7b\x18\x6d\x9e\xbd\x74\x2f\xa6"
      "\xb1\xbc\x8b\x96\x89\x0b\x82\xe1\x52\xf9\x3e\x63\xad\x04\xf6\x06\x86\xe6"
      "\xd2\xba\x21\x59\xda\x77\xbf\x8c\x89\xbd\xfc\x19\x49\x4f\x7e\x57\x98\xa3"
      "\x3d\xd2\xb0\xb2\x06\x22\xc0\xc5\xbd\x1d\x28\xaf\xc2\x02\xeb\x3c\xc2\x18"
      "\xc6\x92\xee\x88\x0b\xbd\x7d\xb6\x86\xe5\xec\xe3\x11\x1d\xcb\x33\x5a\xd6"
      "\x76\x9a\x4a\x1e\x4d\x9a\x83\x0a\x97\x7c\xfc\x80\x68\x7c\x55\xd8\x46\xc8"
      "\xd0\xf9\x12\x5f\x4a\x10\x7a\x77\x28\xfe\x9b\x5c\xba\xf0\x21\x93\x26\x8e"
      "\x68\x16\xc1\x3d\x3c\x98\xac\x05\x9b\x11\x2d\x5b\xc2\x4c\x7a\x15\x39\x06"
      "\x8d\xe5\xb9\x08\x11\x29\x72\x18\x5d\x40\x68\xc9\x0f\xc5\x23\xa4\x94\x5b"
      "\x57\x8c\x27\xd4\x26\x41\x8e\x05\xec\xfd\x76\x80\xa1\xfb\xeb\x19\x8b\xc9"
      "\x49\x88\x2e\xe0\x77\x70\xb8\xe1\x27\x5f\x08\xaf\x2b\x61\x9a\x4b\xb6\x5f"
      "\x30\xc1\x81\x37\x17\xc0\x34\x74\x84\x22\xbc\x89\x46\x61\x23\x62\x3f\xba"
      "\x36\x5d\xb5\x67\x13\x17\xa0\x46\xe8\xc8\x21\xce\xae\x6a\x13\x15\x88\x08"
      "\xeb\x6c\x7f\xe5\x8f\xab\x9f\xf6\x94\x1a\x45\x59\x9c\x15\x02\x3c\xf9\xf4"
      "\xe8\x70\xf9\x1c\x7e\xe4\x46\x2b\xe0\x9f\xf5\x7f\x71\x2d\x77\xf5\x3a\xa1"
      "\x06\xa1\x5b\xa4\xf9\x9f\x9c\x22\x69\x9d\xe9\x97\x30\x8f\x90\xcc\x62\xf9"
      "\x72\xa2\xca\x54\x7d\xd1\x09\x46\xb4\xf7\x65\x96\xe0\x40\x40\x44\x50\xff"
      "\x60\xa3\xeb\x12\x29\xa8\xd2\xac\xbc\xb3\xd9\x48\xc7\x67\x3a\x36\xe9\xcc"
      "\x75\xa6\xda\x6e\xb7\x62\xce\xf4\x0c\x35\x95\x63\xe8\x80\x21\xe2\x47\x39"
      "\x39\x04\x24\x0a\xf1\x65\x7c\x97\x34\x39\xaf\x4f\xbd\x98\xf1\x45\xbd\x1d"
      "\xee\xb4\xe0\x1e\x89\x22\xd6\xba\x00\xa3\x5c\xa4\x7f\x18\x0c\x99\x4a\xf6"
      "\x13\x40\x6f\x65\x6f\xec\x6b\x9e\xfa\x23\x37\x49\x26\x76\x06\x32\xba\xaa"
      "\x4a\x27\xc8\xea\x47\x75\x5c\xff\xc9\xac\x95\xb4\x57\x23\xd7\xff\x31\x6c"
      "\x37\x6c\xdc\x13\x3b\xed\xd2\x14\xe6\x4d\x81\xa4\x24\xe0\x2a\x91\x90\xc7"
      "\x1f\xf0\xdd\x22\x26\xff\x3b\x14\x91\xc3\xa0\x0e\x74\xd3\xb7\xb2\x13\xe7"
      "\x92\x73\x72\x14\x5c\x03\x57\x75\x0e\x65\x8f\x74\x4f\x46\x9d\x90\xf0\x9d"
      "\x2a\xd3\x5b\x25\x63\x10\x09\x68\xde\x11\x80\xf4\xe5\x8c\x9f\x8d\xc1\xfc"
      "\x8a\x30\x60\xc0\x21\xc5\xf4\x00\x76\xd2\x48\x58\x82\xa4\x19\xfe\xe4\x97"
      "\x94\x48\xbf\xe5\xdc\x65\xe9\x10\x21\x47\x6d\x48\x3b\xfc\x14\x3f\xed\x69"
      "\x2f\xab\xce\x63\x98\xf8\x4e\xa5\x6e\x04\xd7\x60\xf1\xe6\x2c\x73\x0c\x9c"
      "\x9a\x07\x6f\x92\x0a\xda\xc4\xf1\x23\xb3\x29\x7c\xae\x8f\xd6\x07\xf9\xfc"
      "\xcb\xed\x6c\x7b\x97\x6b\x08\x26\x89\x03\xdc\x2e\x41\x56\x8b\xd3\x4b\x13"
      "\x7f\x6c\xaa\x16\xd4\xd8\x4a\x20\xcf\x3a\xc5\xf2\x6e\x2f\xdb\x92\x7f\xa9"
      "\xed\x6b\x1f\xf4\x6d\x4b\x0e\x2d\x78\xb2\x26\x40\xf7\x43\xf9\xf8\xa7\x75"
      "\x1e\xbc\x32\x69\x93\x9f\x23\x5f\x03\x39\x0b\x63\xe0\x61\x0b\x48\x2f\x7b"
      "\x51\x3f\xfe\x41\xae\x1e\x82\x36\x26\xcd\xc1\x87\x8a\x2e\x5e\xa1\x72\xe7"
      "\x11\x0a\x83\x9d\xfe\x6b\x7e\xb8\x3c\xea\xf6\x93\xc6\x74\x1b\xd7\x28\x0d"
      "\x54\x7b\x70\x07\x44\xf0\x9a\x09\x77\x47\x3c\x8b\xc5\x5c\x47\x46\xab\xe2"
      "\xbd\xaf\x22\xbd\x52\xc9\xf7\x4d\x0a\x9e\x48\x40\x24\xf7\x3f\x6e\xff\x77"
      "\x2b\x13\xd1\xb7\x6d\xd9\xa2\x8f\x7b\x91\xed\xd7\x8b\x71\x07\x86\x33\x02"
      "\xc3\x8e\x5f\xbb\x71\x0d\x71\x16\xf4\x79\x09\x34\xf3\xf7\x8a\x11\x83\xda"
      "\x29\x9c\xa2\xc6\xe4\x88\x81\x26\x5c\x84\x7d\x18\x18\x0d\xda\x9e\x95\xb0"
      "\xb6\x33\x15\xe8\x71\xc8\x8a\x31\x8b\x18\xa4\x0b\x2d\xa0\xe5\xa9\x79\x3f"
      "\x40\x72\x9d\x80\x45\x36\x66\x7e\x61\xd4\x2a\xad\x11\xb6\xd1\x6a\xdc\x8b"
      "\xaf\xa5\x4a\x57\x0a\xd7\x13\xc4\x59\xe9\xf1\x25\x64\x08\x22\x72\x1d\x44"
      "\x33\x41\x10\x1e\x2a\x2c\x1c\x50\x3b\xe7\x54\x62\x6e\x60\xda\x63\xf7\xe9"
      "\x1e\x9a\x43\xb3\xb6\x8d\x4a\x46\xd5\x1b\x3c\x12\x0b\xc8\x9a\xc0\x3c\x1a"
      "\x7e\xea\x0a\x13\x87\xf0\x6f\x70\xee\x4d\x5c\xc8\x2f\xae\x63\x68\x4b\x5a"
      "\x77\xc5\xd5\xce\x0a\x15\x74\xdf\x79\x85\x23\xb3\x53\x2c\xe2\x52\xe8\xf3"
      "\x97\x43\x97\x88\x5a\x1b\x00\xc3\x2f\xb4\x2c\x65\x32\x7d\x06\xaa\xb5\x88"
      "\x19\x38\xc1\x05\x36\x64\xd7\x8e\x5f\xc2\x7b\x76\xcd\x21\x2a\x76\x41\x88"
      "\x49\x45\x93\xce\xbd\x5c\xe5\xc5\xd2\xb9\xef\x25\xb6\x6b\x3a\xa1\xe3\xd3"
      "\x39\xf7\x01\x60\xb1\x06\x6b\x2d\x70\xbb\xec\xbe\x80\x75\x90\xe9\x67\x39"
      "\xab\x28\x7a\xf1\xe9\xd2\x0c\x10\x61\xe8\x92\xc7\xbb\x37\xf4\x04\x16\xc8"
      "\x91\xd6\x32\x2b\xb6\x2e\x5b\xec\xf2\xaf\x29\xc6\x88\x00\x18\xfa\xd6\x76"
      "\x72\x9e\xa1\xbd\xb1\x96\x04\x97\x84\x77\x49\xaf\x24\x53\x5b\xbb\xe1\xd1"
      "\x86\xdf\xd9\xf2\x48\x38\x7a\x3c\xab\x59\x25\x8e\xf1\xb5\x85\xf4\x21\x16"
      "\x8c\x68\xc5\x9d\x81\x96\x8d\x95\xa9\xb5\xc2\x1b\xdf\xc4\xfb\x0a\xc2\x0c"
      "\xa8\xb5\x54\xd2\x36\x3e\x8f\xba\x0a\x1d\x30\x74\xbc\xbd\x20\x83\xcb\x2d"
      "\x6e\x34\x01\xbd\x0a\xda\xcb\x5a\x1d\xb0\x55\x4a\x87\x1c\xf8\xbf\x2d\x85"
      "\x83\x27\xac\x11\x53\x91\x13\x0f\xb8\xbb\xde\xfd\xe4\xdf\x93\xce\x20\xfb"
      "\x29\xeb\xe9\x95\x6d\x8c\x0c\x38\x32\x63\x45\xba\xb3\xd0\x5a\xcb\xad\x76"
      "\x26\x25\x2b\xa0\x31\x78\x5b\xc3\xed\x83\xaf\xdb\xb7\x8c\x74\xfe\x12\xfc"
      "\x61\x9a\xff\xe6\xca\xac\x2f\xfc\xfb\xa1\x52\x86\x22\xbd\xbb\xc3\xbf\xec"
      "\x2d\xac\xe5\xbb\xf7\xc1\x04\x08\xaa\xd6\xcb\x29\xb1\xf7\x53\x9e\xf9\x9e"
      "\x16\xbd\xaf\xa3\x3b\x9e\x33\x77\xbb\x63\x61\xaa\xd6\xfa\xe3\x77\x37\xff"
      "\x4f\x8c\xa8\x18\x80\x59\xc1\x2c\x8c\xc1\x58\x51\x62\xdc\x90\xd6\x60\xa7"
      "\xec\xf2\x00\xb1\xaa\x28\xa0\xa8\x49\x65\x26\x18\x30\x0a\x7b\xb3\xde\x23"
      "\x89\x8a\x98\xae\x61\x85\x55\xc9\x33\x18\x58\x90\x64\xe3\x07\xba\x78\xa3"
      "\x23\x98\xff\xb7\xa3\xf4\xb3\x41\x5d\xb9\x8d\x64\x96\x3a\xd0\x0b\x9e\x17"
      "\x65\x55\x2f\xaf\x88\x97\x51\x78\x0b\x1f\x6f\xad\x85\x9d\x2b\x94\x5b\xa0"
      "\xac\x7b\xdb\xfe\x27\x15\x7e\x0e\x94\xc2\x82\x57\x3c\xe2\x3d\x14\x73\xd7"
      "\xbd\x18\x63\x97\x07\x0e\xdd\xa5\x8e\xcc\x04\xa8\x2c\xed\x2f\xb1\x7b\x68"
      "\xe4\x65\x9b\x24\x46\x41\xa9\xc1\xaf\x97\x40\x3d\x1f\xf3\x02\x1b\x78\x91"
      "\x90\x3d\x44\x62\xae\x0a\xf1\xfe\xd1\x56\x6b\xa1\x8b\x7f\xe6\x29\xe2\xdd"
      "\x47\xaf\xab\xdf\xab\x2a\x29\x6b\x9f\xee\xae\x4e\x6c\x95\x31\xf9\xc7\x04"
      "\x97\xab\x2d\xb4\x03\x8e\xa0\x9b\x2c\xf1\xe2\xac\xa3\x86\x2c\x50\x51\xa0"
      "\x02\x14\xf4\x88\xfa\x56\x4d\x42\x2f\x2d\x2e\xca\x0f\x5f\x81\x02\xe3\x7e"
      "\xd5\x25\xc1\xbb\x83\xf1\x0b\x2e\xb4\x51\x6f\x18\xe6\x85\xc7\x33\xdc\xe5"
      "\xef\xdc\x3c\x69\x94\x39\x1d\x65\x22\xde\x6b\xa1\xc0\xe9\xc3\xf4\xab\x09"
      "\x2c\x44\xe5\xeb\xd9\xeb\xb5\x47\x66\xce\x38\xf8\x7e\xe0\x94\xe1\x0d\x6b"
      "\x68\xa7\x70\x3d\xd9\x05\xe1\xaf\x08\x24\x95\xd7\x1b\xcf\x17\x37\xab\x9b"
      "\xeb\xd5\x86\x66\x77\x24\x65\xfd\x54\x82\xfb\x32\x58\xbe\x5c\xc8\x93\xd5"
      "\xce\xdf\xe7\xb8\x3e\xc4\x14\x93\x03\x5c\x74\xe9\xa0\x72\xc8\x26\xe9\x3d"
      "\x1e\x50\x32\x82\x5b\x7a\x2e\x70\x15\xde\xb7\x9e\x42\xd7\xa9\x29\x09\x8e"
      "\x68\x84\xdd\x38\x0e\x1e\xd4\x3f\x02\x8b\x19\xef\xf3\xa8\xa4\x86\xfd\xdc"
      "\x9b\xc6\xce\x1c\x37\xc7\xbd\xa7\x8b\x0e\xf7\xfb\xfb\x2d\x7f\xb6\xd4\x26"
      "\xe6\x80\xe8\x1f\x00\xf5\x5f\xc2\x45\xd2\xa9\xa4\x94\x95\x7e\x5f\x19\xe6"
      "\xdf\xd6\x55\xd7\x14\xc5\xeb\xcf\x42\xc2\xbc\x86\x0e\xb3\xdc\xc0\xb1\xb4"
      "\xb1\x7c\x29\x15\xb4\x8d\x12\xd2\x5e\x4d\xba\xb2\x28\xf2\x81\x65\x72\x2f"
      "\x62\x5c\x19\xf3\x08\xd1\x6d\x9d\xe0\xae\x60\xc0\x04\x3b\xb7\x31\x32\xb3"
      "\x90\x54\x99\x40\x60\xef\xd0\xe3\x52\x9c\xa5\xee\xfe\x8a\x61\xf7\x58\x63"
      "\x8e\xe0\x5a\x0d\x31\x24\xfc\xb6\x13\x6d\xc5\xfa\x5b\x9c\xfe\x10\x1d\x8c"
      "\xdc\xaf\xd9\xf3\xd6\x16\x05\x0a\x0d\x03\xee\xe2\xd7\xf2\x40\x93\x97\x1a"
      "\xc5\xef\xf5\xa8\x97\x1a\x66\x78\x19\xb0\x34\x43\xda\x94\x8d\xaa\x7e\x30"
      "\x80\xb7\x42\x5f\xa7\x2a\xa5\x8d\xbc\x10\x12\x14\x44\x5f\x1d\xaa\x80\xc6"
      "\x59\x69\x2e\x56\x2b\x20\x19\x91\x91\x55\xae\x1a\x21\xf6\x72\x1b\xb5\xe1"
      "\xe4\xda\x97\xe6\x77\xd9\xec\x9a\xe2\x20\xc1\x14\x6e\x28\xdf\x3d\x79\x53"
      "\x8a\x97\xde\x79\xb6\xb2\xe1\xef\xbc\x68\x32\xfd\xfa\x8a\xa7\x4f\x15\x04"
      "\xc4\x1d\xb5\xda\xb3\x93\x2d\x32\x75\x11\xe8\x4d\xdd\x06\x2b\xea\xef\x2a"
      "\x83\xca\xba\xf4\x45\x35\x89\x71\xfb\x64\x15\x63\x33\x06\xe1\xf4\x5a\x4e"
      "\xaf\x9d\x85\xe5\x2c\xf5\x34\x68\xd2\x38\x5b\x6a\x31\x81\x86\x93\xdc\xe1"
      "\x3c\x29\xef\x19\x98\x40\xaf\x65\xd9\x66\x7d\xbe\x75\xcd\x3d\x94\x4d\x22"
      "\x53\xcc\x27\x3d\x90\xe3\x3b\xaa\x00\xbc\xda\xe0\xd9\x22\xdc\x3d\x62\x64"
      "\x58\x02\x2c\xbd\x9c\x98\xc2\x39\x2a\x3d\x67\xb9\xed\x66\x2e\x04\xf1\xa8"
      "\x7a\xf0\x3d\xf7\x1f\x9b\x4a",
      2059);
  *(uint64_t*)0x20001308 = 0x80b;
  syscall(__NR_writev, r[0], 0x20001300ul, 1ul);
  res = -1;
  res = syz_open_dev(0xc, 4, 0x14);
  if (res != -1)
    r[1] = res;
  *(uint16_t*)0x20000040 = 0x400;
  *(uint16_t*)0x20000042 = 0x4d8;
  *(uint16_t*)0x20000044 = 0;
  syscall(__NR_ioctl, r[1], 0x5609, 0x20000040ul);
}
int main(void)
{
  syscall(__NR_mmap, 0x1ffff000ul, 0x1000ul, 0ul, 0x32ul, -1, 0ul);
  syscall(__NR_mmap, 0x20000000ul, 0x1000000ul, 7ul, 0x32ul, -1, 0ul);
  syscall(__NR_mmap, 0x21000000ul, 0x1000ul, 0ul, 0x32ul, -1, 0ul);
  loop();
  return 0;
}
