// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <dirent.h>
#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <sched.h>
#include <signal.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mount.h>
#include <sys/prctl.h>
#include <sys/resource.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <time.h>
#include <unistd.h>

#include <linux/capability.h>

static void sleep_ms(uint64_t ms)
{
  usleep(ms * 1000);
}

static uint64_t current_time_ms(void)
{
  struct timespec ts;
  if (clock_gettime(CLOCK_MONOTONIC, &ts))
    exit(1);
  return (uint64_t)ts.tv_sec * 1000 + (uint64_t)ts.tv_nsec / 1000000;
}

static bool write_file(const char* file, const char* what, ...)
{
  char buf[1024];
  va_list args;
  va_start(args, what);
  vsnprintf(buf, sizeof(buf), what, args);
  va_end(args);
  buf[sizeof(buf) - 1] = 0;
  int len = strlen(buf);
  int fd = open(file, O_WRONLY | O_CLOEXEC);
  if (fd == -1)
    return false;
  if (write(fd, buf, len) != len) {
    int err = errno;
    close(fd);
    errno = err;
    return false;
  }
  close(fd);
  return true;
}

#define MAX_FDS 30

static long syz_open_dev(volatile long a0, volatile long a1, volatile long a2)
{
  if (a0 == 0xc || a0 == 0xb) {
    char buf[128];
    sprintf(buf, "/dev/%s/%d:%d", a0 == 0xc ? "char" : "block", (uint8_t)a1,
            (uint8_t)a2);
    return open(buf, O_RDWR, 0);
  } else {
    char buf[1024];
    char* hash;
    strncpy(buf, (char*)a0, sizeof(buf) - 1);
    buf[sizeof(buf) - 1] = 0;
    while ((hash = strchr(buf, '#'))) {
      *hash = '0' + (char)(a1 % 10);
      a1 /= 10;
    }
    return open(buf, a2, 0);
  }
}

static void setup_common()
{
  if (mount(0, "/sys/fs/fuse/connections", "fusectl", 0, 0)) {
  }
}

static void loop();

static void sandbox_common()
{
  prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0);
  setpgrp();
  setsid();
  struct rlimit rlim;
  rlim.rlim_cur = rlim.rlim_max = (200 << 20);
  setrlimit(RLIMIT_AS, &rlim);
  rlim.rlim_cur = rlim.rlim_max = 32 << 20;
  setrlimit(RLIMIT_MEMLOCK, &rlim);
  rlim.rlim_cur = rlim.rlim_max = 136 << 20;
  setrlimit(RLIMIT_FSIZE, &rlim);
  rlim.rlim_cur = rlim.rlim_max = 1 << 20;
  setrlimit(RLIMIT_STACK, &rlim);
  rlim.rlim_cur = rlim.rlim_max = 0;
  setrlimit(RLIMIT_CORE, &rlim);
  rlim.rlim_cur = rlim.rlim_max = 256;
  setrlimit(RLIMIT_NOFILE, &rlim);
  if (unshare(CLONE_NEWNS)) {
  }
  if (mount(NULL, "/", NULL, MS_REC | MS_PRIVATE, NULL)) {
  }
  if (unshare(CLONE_NEWIPC)) {
  }
  if (unshare(0x02000000)) {
  }
  if (unshare(CLONE_NEWUTS)) {
  }
  if (unshare(CLONE_SYSVSEM)) {
  }
  typedef struct {
    const char* name;
    const char* value;
  } sysctl_t;
  static const sysctl_t sysctls[] = {
      {"/proc/sys/kernel/shmmax", "16777216"},
      {"/proc/sys/kernel/shmall", "536870912"},
      {"/proc/sys/kernel/shmmni", "1024"},
      {"/proc/sys/kernel/msgmax", "8192"},
      {"/proc/sys/kernel/msgmni", "1024"},
      {"/proc/sys/kernel/msgmnb", "1024"},
      {"/proc/sys/kernel/sem", "1024 1048576 500 1024"},
  };
  unsigned i;
  for (i = 0; i < sizeof(sysctls) / sizeof(sysctls[0]); i++)
    write_file(sysctls[i].name, sysctls[i].value);
}

static int wait_for_loop(int pid)
{
  if (pid < 0)
    exit(1);
  int status = 0;
  while (waitpid(-1, &status, __WALL) != pid) {
  }
  return WEXITSTATUS(status);
}

static void drop_caps(void)
{
  struct __user_cap_header_struct cap_hdr = {};
  struct __user_cap_data_struct cap_data[2] = {};
  cap_hdr.version = _LINUX_CAPABILITY_VERSION_3;
  cap_hdr.pid = getpid();
  if (syscall(SYS_capget, &cap_hdr, &cap_data))
    exit(1);
  const int drop = (1 << CAP_SYS_PTRACE) | (1 << CAP_SYS_NICE);
  cap_data[0].effective &= ~drop;
  cap_data[0].permitted &= ~drop;
  cap_data[0].inheritable &= ~drop;
  if (syscall(SYS_capset, &cap_hdr, &cap_data))
    exit(1);
}

static int do_sandbox_none(void)
{
  if (unshare(CLONE_NEWPID)) {
  }
  int pid = fork();
  if (pid != 0)
    return wait_for_loop(pid);
  setup_common();
  sandbox_common();
  drop_caps();
  if (unshare(CLONE_NEWNET)) {
  }
  loop();
  exit(1);
}

static void kill_and_wait(int pid, int* status)
{
  kill(-pid, SIGKILL);
  kill(pid, SIGKILL);
  for (int i = 0; i < 100; i++) {
    if (waitpid(-1, status, WNOHANG | __WALL) == pid)
      return;
    usleep(1000);
  }
  DIR* dir = opendir("/sys/fs/fuse/connections");
  if (dir) {
    for (;;) {
      struct dirent* ent = readdir(dir);
      if (!ent)
        break;
      if (strcmp(ent->d_name, ".") == 0 || strcmp(ent->d_name, "..") == 0)
        continue;
      char abort[300];
      snprintf(abort, sizeof(abort), "/sys/fs/fuse/connections/%s/abort",
               ent->d_name);
      int fd = open(abort, O_WRONLY);
      if (fd == -1) {
        continue;
      }
      if (write(fd, abort, 1) < 0) {
      }
      close(fd);
    }
    closedir(dir);
  } else {
  }
  while (waitpid(-1, status, __WALL) != pid) {
  }
}

static void setup_test()
{
  prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0);
  setpgrp();
  write_file("/proc/self/oom_score_adj", "1000");
}

static void close_fds()
{
  for (int fd = 3; fd < MAX_FDS; fd++)
    close(fd);
}

static void execute_one(void);

#define WAIT_FLAGS __WALL

static void loop(void)
{
  int iter = 0;
  for (;; iter++) {
    int pid = fork();
    if (pid < 0)
      exit(1);
    if (pid == 0) {
      setup_test();
      execute_one();
      close_fds();
      exit(0);
    }
    int status = 0;
    uint64_t start = current_time_ms();
    for (;;) {
      if (waitpid(-1, &status, WNOHANG | WAIT_FLAGS) == pid)
        break;
      sleep_ms(1);
      if (current_time_ms() - start < 5 * 1000)
        continue;
      kill_and_wait(pid, &status);
      break;
    }
  }
}

uint64_t r[2] = {0xffffffffffffffff, 0xffffffffffffffff};

void execute_one(void)
{
  intptr_t res = 0;
  res = -1;
  res = syz_open_dev(0xc, 4, 1);
  if (res != -1)
    r[0] = res;
  res = -1;
  res = syz_open_dev(0xc, 4, 1);
  if (res != -1)
    r[1] = res;
  *(uint16_t*)0x20000000 = 0x7fff;
  *(uint16_t*)0x20000002 = 1;
  *(uint16_t*)0x20000004 = 3;
  syscall(__NR_ioctl, r[1], 0x5609, 0x20000000ul);
  *(uint8_t*)0x20000100 = 0x7f;
  *(uint8_t*)0x20000101 = 0x45;
  *(uint8_t*)0x20000102 = 0x4c;
  *(uint8_t*)0x20000103 = 0x46;
  *(uint8_t*)0x20000104 = 0;
  *(uint8_t*)0x20000105 = 0;
  *(uint8_t*)0x20000106 = 0;
  *(uint8_t*)0x20000107 = 0;
  *(uint64_t*)0x20000108 = 0;
  *(uint16_t*)0x20000110 = 0;
  *(uint16_t*)0x20000112 = 0;
  *(uint32_t*)0x20000114 = 0;
  *(uint32_t*)0x20000118 = 0;
  *(uint32_t*)0x2000011c = 0x38;
  *(uint32_t*)0x20000120 = 0;
  *(uint32_t*)0x20000124 = 0;
  *(uint16_t*)0x20000128 = 0;
  *(uint16_t*)0x2000012a = 0x20;
  *(uint16_t*)0x2000012c = 0;
  *(uint16_t*)0x2000012e = 0;
  *(uint16_t*)0x20000130 = 0;
  *(uint16_t*)0x20000132 = 0;
  *(uint32_t*)0x20000138 = 0;
  *(uint32_t*)0x2000013c = 0;
  *(uint32_t*)0x20000140 = 0;
  *(uint32_t*)0x20000144 = 0;
  *(uint32_t*)0x20000148 = 0;
  *(uint32_t*)0x2000014c = 0;
  *(uint32_t*)0x20000150 = 0;
  *(uint32_t*)0x20000154 = 0;
  memcpy(
      (void*)0x20000158,
      "\xef\xae\x1f\x7f\xab\x20\x83\xe0\x2c\xf7\x44\x01\xee\x43\xae\x71\x6d\xf9"
      "\x82\xe4\x14\x5b\x0d\x5f\x5b\x91\x26\x4c\xfc\x82\x51\xf3\xc6\xd4\x83\x61"
      "\x18\xe8\x7c\x4f\xd2\x3c\xaf\x21\x40\x2f\xa4\x19\x73\x35\x4d\x45\xb4\xd3"
      "\xf3\xab\xf8\x74\x94\xa4\xea\xe9\x99\x49\x10\x17\xf4\x1a\x45\x9d\x96\x6c"
      "\x73\x71\x27\x4c\x68\x0b\x89\x4c\xdc\x31\xb7\x8f\xd3\x0e\x90\x56\xd8\x04"
      "\x81\x34\x1c\x6e\x32\xd8\x26\x48\x96\x73\x2e\x4a\xbe\xaf\x4b\xbe\x70\xd5"
      "\x6e\x26\xaa\xa3\x95\xa7\xe7\xe0\x17\x50\x81\xf7\x45\xea\xff\xcd\x95\x82"
      "\x82\x40\xab\x2b\xbf\x21\x9a\x2d\xae\x7e\xf0\xbc\x4a\xf9\x26\x5e\x2d\xfe"
      "\x89\x88\x00\x31\x0f\x06\x43\x60\x62\x81\xc2\xaa\x83\xf1\x31\x71\x28\x85"
      "\x0e\x42\x34\xe1\x21\x9a\x53\x51\x20\x0c\xd2\xdf\x54\x7d\x73\x78\x8a\x58"
      "\x1b\x7a\x12\x72\xab\x50\x88\x67\xa4\x25\x71\xb8\x62\xbc\xeb\x39\x97\xb2"
      "\x68\x3f\xe4\x90\x37\x3f\x92\x9a\x62\x7a\x1b\x21\xb9\x0a\x20\x54\xbc\x4b"
      "\x77\xf4\x99\xdf\x7a\x8e\x15\xfa\xea\xb7\x44\x74\x96\x73\x2c\x3d\x8b\x62"
      "\x67\x6c\xc1\x4c\xe5\xbb\xb9\x87\x0a\x60\xd3\x72\x71\x9a\x7e\xef\xc1\x33"
      "\x62\x88\xb7\x2b\x4b\x44\x76\xbc\x60\xf5\x4f\x5c\xfe\x26\x6e\x5d\x7e\x45"
      "\x5b\x01\x2c\x35\x90\xaa\x19\xa6\xb1\xed\x42\x96\xa3\x05\x31\xed\x0c\xc2"
      "\xf1\x61\x6f\xee\x5d\x31\x7f\xd1\xec\x1d\xf4\x3b\x13\xbf\xb5\x7a\x73\x96"
      "\xc1\x65\x75\x50\xf9\x69\x37\x9a\xf6\x3a\xcc\x54\x20\xb4\xaf\xb1\xd3\x39"
      "\x42\x83\xb2\x30\x17\x05\xe2\x43\xca\x79\x91\xda\xe4\x0c\x4a\x2f\xc5\xf3"
      "\x4a\x07\xa8\x0f\xc7\x0a\x01\xcb\xf6\xfc\x56\x40\xe3\x7c\x64\x2a\x95\x6b"
      "\xe7\xc6\x6f\xa2\x81\x57\x5d\x56\xe5\x6b\xa5\x69\x00\x06\x14\x57\x30\x40"
      "\x37\x77\x96\x35\xbb\x2f\x9a\xd6\xaf\x93\x34\x77\x74\xae\x80\x64\xea\xfd"
      "\x0f\xba\xf9\x78\xb6\xc3\x1d\xf0\xe2\x15\x2e\x0a\x8e\xcc\x33\x98\xbe\xef"
      "\xe7\x30\x8c\xe2\xcb\x92\xe3\x93\xe3\x36\xd3\x1e\xd8\x05\xdb\xb0\x41\x0b"
      "\xc6\xac\x12\x67\x59\x5c\x64\xe0\xee\x5e\xce\x8e\xc6\x00\x27\x82\xc4\x2a"
      "\x0f\x60\x8d\xcf\xb3\x01\x86\x70\x61\xb9\xa5\xa4\xb3\x93\x34\xbb\xb3\xff"
      "\xff\x87\xd5\x34\x8f\xc7\xc5\x87\x01\xf6\xac\x1b\x65\xb2\x8d\x4e\x30\x77"
      "\x61\xf3\xe5\xff\xfb\xbb\x51\x14\x51\x47\x8d\x86\x4b\xf2\xd3\x70\xbf\x97"
      "\xb3\xee\x97\x21\xb1\xcd\xbe\xd7\x33\x9a\xac\x5a\xee\x62\x0f\xc2\xa4\x8c"
      "\x88\xaf\x9e\x37\x6b\x93\xf8\xd1\x0c\x94\x9f\x73\x05\x32\xae\xd2\x15\x7f"
      "\x8d\xc1\x7c\xe3\x8f\x65\x05\x15\xac\x81\xc0\x4c\xfc\x8a\xf7\xcf\x42\x75"
      "\x3f\x35\x05\xa0\xd4\x15\xdb\x32\x52\xa9\x79\x28\xc5\x7f\x77\x65\xe6\x00"
      "\xc1\x7b\xc4\x15\x02\x21\x28\x8f\x51\xa2\xc8\xec\xfc\xda\xaf\xd0\x55\x33"
      "\x9c\xb5\xca\xa2\x36\xaf\xf2\xf2\x2a\xea\xde\xad\x24\x81\x89\x03\x8b\xf5"
      "\x4f\x48\xd4\x77\xfe\xec\x10\xb6\x4d\xaf\x3c\x64\xf6\xd8\x25\xf8\xd7\x71"
      "\x89\xf1\xfc\x0e\x13\x6b\x25\xd2\x4a\x24\x2a\x68\xcd\xbe\x52\x7d\x55\xe7"
      "\x94\xdf\x61\x78\xa7\x3b\x4e\x2f\x64\xe8\x1c\x63\x66\x28\x23\x6c\x22\x14"
      "\x08\xd4\xe7\xa8\x04\x09\x90\xab\xdd\x63\x8d\x78\x82\xa1\x7b\xb5\x18\x9c"
      "\xa3\x47\x3c\xc3\x61\x44\x71\x9e\xa1\x73\xea\xbc\x3b\x54\x52\xf4\x73\x0d"
      "\x89\x67\x54\x5d\x1f\x40\xb2\x17\x0c\xaf\x9f\x5f\x34\x3c\xb4\x70\xa4\xbd"
      "\x29\xab\x0b\x26\xb1\x0f\xc6\xf8\xeb\x85\x3e\xf6\x3c\x28\xe5\x5e\xbe\xf4"
      "\xdd\x4d\x2c\xae\x06\xc5\xf0\xd9\xc0\xeb\xe6\x2e\xf5\x35\xa3\x66\xe3\x9c"
      "\x55\x74\xd7\xc4\x74\xa8\xa9\x7e\xac\x82\x85\x7a\xcd\x9c\xc8\x80\xd4\xf5"
      "\x0b\x13\xe9\xd3\xfa\x69\x01\x05\x4b\x31\x50\xbe\xf3\xc7\xd5\x01\xd5\xbb"
      "\x13\x2d\xf3\x2d\xd5\x10\xef\xcd\x4f\xe3\x0a\xa3\x46\x08\xb2\xea\xc2\xe6"
      "\x12\xa8\x1a\xf0\x3c\x97\x04\x48\x6f\x26\x69\x69\xcc\x38\x41\x96\x6a\x72"
      "\x5e\x58\x70\x2a\xed\x4a\x14\x6a\x88\x08\x70\xdd\x0b\xe0\x94\x87\xcc\x5c"
      "\x21\xa0\x87\xcc\xdb\x98\x88\x73\xbb\xa6\x7f\x13\xd6\x2a\x75\xb4\x06\xfb"
      "\x14\xcc\xf0\xfc\xab\x1a\xfe\x34\xd6\x60\x4f\xa9\x2f\x39\xaf\x50\xb7\x19"
      "\xae\xa4\x9c\x01\x36\x16\x0e\xa2\xf2\x42\xa3\x5a\x71\x2e\xc6\x66\xc7\x82"
      "\x29\x57\x43\x75\x0e\xf1\x49\x26\x2b\xdb\x4c\xbe\xba\xeb\xce\x42\x0e\x4b"
      "\xe7\x8d\x81\x8a\x19\x2e\xcc\xc7\xef\xfd\xe0\x37\x21\x5e\xe6\x19\x58\x3a"
      "\x71\x04\x58\xd3\x4d\x78\x82\xe9\x15\xda\xda\xa2\x57\xd8\x80\x2a\xb0\x42"
      "\xbf\x1a\x67\x9a\x44\x92\x04\x45\xc0\xd6\xc8\x36\xde\xd2\x83\xaa\xf6\xd3"
      "\x4c\xd1\x64\x6e\xd3\xf9\xc6\x20\x46\xc6\x6f\x3d\xef\xd6\xd6\xca\x72\x70"
      "\xa0\x3e\x93\xd9\x3e\x3f\x9e\x25\xbd\x47\x5d\xd5\x82\x4d\xb1\x35\xa1\x9b"
      "\x21\xdc\xe4\xbf\x63\x5b\xb8\x94\x92\x24\x72\x7e\xdb\xcd\x5e\x81\x17\x6e"
      "\xf9\xc6\x30\x39\xab\xaa\xe2\x4c\xad\x84\x2f\xee\x8d\x4c\x26\xdf\x03\x22"
      "\xdc\x38\xd5\xf9\x71\xb7\x61\xc1\x6a\x29\x88\x0f\x5c\x5f\x1e\x80\x97\x88"
      "\x02\x5b\x2b\x74\xe6\x99\xd1\x88\xa3\x23\x89\x03\xe3\x0a\x2b\x1b\x3d\x41"
      "\xb1\x87\x6d\x13\x9e\xc6\x0b\xa1\x49\x91\x96\xa0\x9d\xcb\x5c\xb2\x37\x3c"
      "\x51\xbb\x86\xaf\xa0\xfe\xb0\x38\x3c\xe8\xdb\x48\x9f\x23\xcc\xa2\x02\x46"
      "\x55\x8a\x34\x55\x3b\x33\x27\xc9\xfb\x97\x36\x60\x33\x08\xc3\x75\x61\xe0"
      "\x47\xfe\xcd\x21\x60\x90\x70\xb0\x4c\xad\x06\xec\xdf\xdd\x6b\xab\x1c\x3e"
      "\xb5\xbc\x2f\x5b\x26\x5c\x4d\x32\xa1\x05\x71\x34\xb8\xe3\x8f\x77\xce\x9a"
      "\x7b\xa3\xb5\x7c\x00\xbd\x9e\xd4\x71\xc0\x8b\x12\xdb\x0e\x39\x7f\x01\xd0"
      "\x63\x36\xdb\x38\x2f\x4a\x76\x16\x09\x7c\x97\x44\x31\x7d\xed\xec\x01\x1d"
      "\xc9\x4b\x2d\x9c\xee\x37\x81\x71\xfa\x0b\xec\xa1\xd0\x2a\xeb\x2c\x4f\x7f"
      "\x17\xc1\xf8\x0d\xc9\xa4\xfe\x3a\x6b\x2a\x3d\x98\x48\x51\x27\xdb\xe0\x96"
      "\x16\x1c\xa6\x97\xf5\x8f\xd7\xa0\xb8\x19\x9d\x9c\xad\x03\x1c\x51\x4e\x7e"
      "\x06\xc0\x9f\x04\x26\xb0\x3c\xa5\x68\xc2\x91\xe0\x5c\x65\xaa\x6a\xf5\xb5"
      "\x3f\x31\x46\xff\x40\x71\x38\xe5\xfd\x33\x4a\xaa\xc1\x16\xc6\x17\x91\xc0"
      "\xc6\x89\x0d\x9a\x3a\x1b\xf6\xe6\xfe\x35\x41\x21\x92\xb9\x56\xe2\xa9\x45"
      "\x1f\xb5\x3a\xe9\xe7\x74\x58\xa5\xf4\x16\x32\x0e\xe6\xb1\xbb\x67\x86\xcf"
      "\x8f\x5d\x81\xee\xe0\x69\x6b\x22\xc2\xb6\xe7\x62\x17\x66\x51\x10\xb8\x32"
      "\xe1\x2e\x1b\x71\x73\x54\x41\x94\xfb\xaf\x08\x2d\x2e\xec\x14\x74\x8f\xd1"
      "\x5b\xe0\xbb\xfe\x3d\x0c\x2a\x6d\x9a\x79\xb8\x11\xdd\xe6\x5c\x88\xf7\xc6"
      "\x0c\x04\x4b\xa0\xbc\x84\x13\x2e\xfb\xfc\xcb\xd0\x53\x49\x8d\x27\x35\x99"
      "\x85\x50\xae\x97\xe2\xd7\xc5\xa6\x98\x22\x9a\x0e\x93\x18\x94\xf9\xce\xa7"
      "\x43\x21\x86\x25\xe3\x98\xc5\xf3\x94\x8e\xc8\x0b\x78\xd0\x8c\x29\x0d\x7c"
      "\xc1\xe3\x05\x03\xab\x25\x5a\x0b\x9d\x33\x5c\x3e\x1d\xac\xb3\x62\xdb\x14"
      "\x17\x89\x44\x1f\xdc\x5a\x4c\x06\x74\xec\xca\x0f\x77\xac\x10\x21\x7a\x98"
      "\x06\x00\x51\xa0\xab\x7d\x45\x1e\x70\x30\xc2\xb1\x25\x9b\x46\x6c\x2b\x21"
      "\x42\x5d\x21\x09\x03\x9c\x67\x3b\xd2\xc4\xa0\x33\xac\x67\xef\x8b\xc7\x36"
      "\xcd\x2a\xbd\x42\xf7\xf2\x55\xaf\x7a\xa5\xe3\xc6\x65\x84\x29\x2f\x8d\x36"
      "\x7f\x1b\x45\xf6\xbe\x7f\x3c\x48\x0f\x23\xbf\xc1\xfd\x03\xe4\xb4\x38\xf7"
      "\xe3\x78\x9f\x55\x0c\x21\xa1\x97\x4a\xb9\x10\xae\x76\x09\xc4\x28\xb0\x0b"
      "\xaa\x96\x05\x87\x5f\xd5\xd0\x19\xee\x79\x91\xf5\x09\x8e\xf2\xf7\x27\x29"
      "\xdc\x70\x65\x66\x7c\xa9\x26\xd7\x4b\x2f\x70\x66\x87\xd2\x4d\x7a\x8a\xfa"
      "\xa7\x25\xf4\x4c\xa5\xde\xc3\x63\xb7\x1c\x58\x63\x52\x09\x3f\xfb\x26\xb4"
      "\x6b\x70\xc7\x73\x52\x8d\xf0\x4e\x21\xa0\x16\x12\x1e\x01\xf3\x5e\x25\xc0"
      "\x1e\x72\x1e\x09\x65\xea\xed\xcb\x59\x50\x4c\x9e\x9b\x95\x49\xb3\xe0\xce"
      "\x40\x59\x87\x76\x2e\xd4\xb0\x19\xe3\x31\xae\x92\x85\xce\x2b\x7f\xbe\x73"
      "\xc0\x06\x21\x29\x74\x38\x9a\xc5\xe2\xf1\xc1\xd5\x64\x4c\x96\x01\x2b\x33"
      "\xc0\xd9\x49\x8c\xb2\x1d\xc5\x80\x64\x22\xa6\xcb\xcb\x1a\xc6\xff\x80\x2d"
      "\x27\xbe\xb5\xfe\xcb\xe0\x4c\x4b\x49\x26\xae\xa0\x79\xb1\xc8\x51\x01\xee"
      "\x96\x02\xde\x13\x21\x7b\x7f\x0f\x62\x0f\x7b\xd6\xcd\x11\x0e\x45\xce\x71"
      "\xb1\xea\x49\x52\xad\x57\x8c\x8b\x5b\xb1\xc9\x8d\x6f\x77\x6e\x54\xf7\x6c"
      "\xc9\x79\x54\xe4\x63\x93\x3e\xbc\x80\xf7\xb3\xa1\x5f\x1c\xd6\x61\xe3\xf0"
      "\x48\x66\x0b\x3f\xeb\x49\x54\xd2\x01\x8e\x2f\x7c\x76\x47\xfc\x40\xbd\x59"
      "\x79\x04\x4c\x88\x97\xdd\x3a\xf0\xfd\x29\x34\x11\x40\x88\x0c\x2a\x9f\xd3"
      "\xec\xb9\x69\xdd\x84\x8c\xf6\xdc\x4b\x8c\xc3\x99\x38\x27\x6f\x6f\x17\x8e"
      "\xcc\xaf\x45\x15\xc0\x42\x20\xa7\x27\xf8\xf5\xce\x10\xa8\x11\xaf\x25\xe8"
      "\x86\xff\xca\x94\x89\x03\x02\x2a\xac\x42\x28\x9a\xad\x77\x27\x26\xd6\x74"
      "\x2b\xc7\x9f\x10\xe7\x86\x2c\x01\x44\x6d\xce\xad\xd2\x97\x94\x99\x08\x7f"
      "\x6d\x5f\x9a\x68\xa4\x11\x1d\x13\xa3\xb7\x66\xb3\x60\xdc\x9b\x2b\x9b\x2e"
      "\x79\x1b\xa6\x1c\xa8\x60\x2a\xf8\xa3\x43\xad\x02\x96\x6c\x54\xd5\x7e\x31"
      "\x28\x39\x74\x35\x70\xba\x85\x15\x85\x6b\x81\x6a\x00\x3e\xf0\x07\xbc\x0c"
      "\xe9\x29\x96\x83\xbd\x09\x8b\x8b\x9f\xeb\xd5\x9b\x23\xa3\x04\x7f\xbe\x09"
      "\x55\x6d\xc7\xbb\x89\x51\xba\xe0\x0a\xda\xf4\xf3\xf3\x01\xac\x86\x19\x04"
      "\x0c\xaa\x9a\xc2\x37\x6d\x0f\xa9\xc7\xa8\xd4\x41\xec\xba\xa5\xc5\x52\x85"
      "\xd6\x15\x1c\x92\xff\xa9\xe3\x74\xc5\x0d\x36\x98\xa8\x01\x27\x7c\xa8\xf0"
      "\x1d\x93\x17\x4a\x0c\xe3\x61\x40\x70\x21\x85\x29\x58\x0d\xae\xf6\x9d\x51"
      "\xed\xbc\x60\x5d\x08\x1d\xef\xdc\x63\xcb\xe5\x8d\x74\x75\x84\x64\x20\x82"
      "\x87\x3d\xfb\xe6\x99\x67\x7d\x08\xf6\x07\x35\xdc\xa3\x47\x05\xbb\x66\xd9"
      "\x9b\x09\x5f\xee\xf0\x17\x98\x0f\x8a\x4b\x11\x77\xc1\x3b\x11\x92\x29\xb8"
      "\xa7\xe5\xf1\x5c\xea\x2c\x8e\xa9\x27\x3c\x49\x77\xae\x06\xf7\x5a\x31\x73"
      "\x0c\x7f\xca\x9f\x74\xe6\x48\x6c\xa9\x0f\x33\xef\x2f\xc2\xf9\xcd\xea\x09"
      "\xa2\x7a\x97\x00\xa5\xad\x5a\xee\x88\x2b\x59\x3a\x78\xa7\xb5\xf3\x6d\xe5"
      "\xa6\x13\xbc\x3b\xeb\x5e\xd1\xe4\x89\x11\xb6\x7c\x65\xb1\x25\x71\xec\xa0"
      "\xba\xaa\x16\xb7\x18\xaa\x16\x1a\x1b\xe2\x3c\x54\xc2\x10\x49\x65\x63\xfb"
      "\x00\x6c\x47\x67\x95\x38\x12\xb1\xee\x1d\xef\xcb\x6d\x8a\x73\xfc\xd3\xd0"
      "\x7e\xa4\x08\x73\x68\xe4\x9b\xf7\x8c\xd2\x90\x10\x65\x29\x8f\xf5\x8b\x95"
      "\xe6\x7f\x70\xa0\x46\xef\xe6\x0f\x12\xca\x86\xc5\xa0\x41\x0c\xea\x16\x56"
      "\x0d\xaf\x57\x76\x0d\xdd\xce\xa7\x52\xad\x3f\x2f\x9a\x13\x66\x12\x0a\x11"
      "\x71\x07\xcf\x65\xfb\xe7\x60\xd2\x02\x59\x5d\xa7\x76\x15\x9a\x74\x31\xd4"
      "\x99\x03\x9e\xb9\x46\xcb\x25\x85\x77\x0f\xf4\x83\x80\xf7\x9e\xca\x2a\x9b"
      "\xb4\x43\xb5\xff\x84\xd9\x20\x70\x30\xf7\x41\x9c\x55\x46\x02\xa2\x9a\x60"
      "\x13\x62\xd1\x51\xde\x06\x29\xd3\x37\xb6\xdb\xe3\xf8\x0c\x4b\x2a\x73\x50"
      "\x45\x6c\xce\xd0\x64\xaa\x87\x13\x19\x46\x59\xf8\xf6\xcc\xde\x81\x5a\x27"
      "\x37\xe6\xe9\xfe\x19\xdb\xc5\xbe\x29\xa7\x54\x58\xbd\xc3\x61\x0a\x8e\xbe"
      "\xea\xb6\x44\x02\x96\xbb\xe9\x59\xa4\xfc\xfe\x1f\xa9\x13\xf0\x02\xea\x5b"
      "\xed\x6f\x2f\x8c\x77\x7d\x40\xd3\x02\x1f\xce\x8d\x00\x7c\x55\x3a\x02\xe4"
      "\x17\x3e\xdc\xa4\x09\xc7\x7d\x1c\xf5\x57\x2f\x46\x85\xd3\x3e\xc5\x30\x4c"
      "\xd0\xa8\xd6\xa3\x3c\xf1\x4c\x2c\xe7\xdd\x0f\x28\xe5\xa2\x36\xce\x8e\xaa"
      "\xfd\xe3\x7d\x06\x37\xda\x51\x50\xd2\x86\x89\x32\x70\x09\x03\x08\x25\x09"
      "\xa7\x83\xa3\x28\x65\x3c\x36\xa5\xe0\x24\x61\x13\x05\x75\xcb\x38\x1e\xfd"
      "\x00\xd5\xfa\x2b\xe7\x30\x0e\x16\x5c\xc2\x1d\x63\x46\xbb\xd8\x05\x39\x77"
      "\x7b\xb7\x97\x2a\xed\x3f\x4d\x18\x87\x7b\xa9\x1b\x4a\xf3\x24\x3a\xa9\xb0"
      "\xfc\x34\x6a\xb0\x66\xbe\x2a\x6e\xba\x6a\xd2\xee\xdb\xb8\x4b\x41\x30\x0e"
      "\x72\x35\x0a\x15\x4a\x7d\x68\x91\x53\xb4\xa8\x81\x8a\x85\xe0\xea\x4a\x0a"
      "\x2e\xb6\xe9\x1f\x6e\x20\x24\x47\x09\x16\x8c\x33\x1c\xdd\xac\x17\x7a\x5c"
      "\xd4\xb6\x26\x53\x2f\x8b\x9a\xa7\x7c\x24\xef\xee\x01\x96\x0a\x1c\x01\x8b"
      "\xf3\x54\x41\x1d\x3d\xc6\x45\xd2\x07\xd6\x5a\x51\xba\xe7\x8e\x92\xce\x82"
      "\x97\x83\xfa\x0c\x14\xa3\x11\x50\x65\x2d\xd8\x6b\xcb\x30\x0d\x13\x5e\xde"
      "\x2b\x3e\x9c\xfc\xf3\x20\x96\xc2\xdc\xed\x3a\xd2\x97\x71\xeb\xd4\x0d\x6d"
      "\xee\xef\xff\x5a\xd7\xca\x2b\xef\xc8\x98\x4f\x41\x4e\xeb\xdb\x09\x70\xf8"
      "\x1f\xd9\x37\x51\x3a\x14\x19\xeb\xf2\xc5\x38\x23\xa2\x55\xcb\xfc\x63\xee"
      "\xa1\x7f\xec\x0d\x46\x11\x80\xac\x0e\x83\xd8\x5c\x30\xca\x50\xe4\xc1\x2f"
      "\xdc\xc9\x5b\x5b\xf4\xe7\x1a\xfe\x2c\x5d\xbe\x10\x96\xb7\x0d\xd6\xff\x20"
      "\xfb\x1d\x54\x25\x20\xc7\x7d\xe5\xe0\x49\xaa\x03\xf9\x95\xb2\x3b\xa8\x77"
      "\xee\x6e\x76\x51\x93\xd6\x17\x94\xfe\x2f\x73\xca\x2d\x04\x8d\x9d\x76\x71"
      "\xe5\x79\xec\x88\x01\x54\x65\x60\xd7\xc3\x0a\xc9\xa8\xc4\x76\x03\xf7\xc4"
      "\x64\x0a\x5c\x04\xc9\x4d\xa6\x52\xf0\x73\x8a\x74\x1c\x64\xc5\x60\xab\x3c"
      "\xe5\xc0\xcb\x17\x16\xa7\x05\x29\xce\x73\xd3\x1e\x65\xd2\x5a\x22\x20\xe0"
      "\x79\x42\xc0\x60\x53\xf9\xe1\xb8\x07\xdb\x8e\x26\x85\x26\x25\x92\xf9\x49"
      "\xcf\xe6\x01\xbb\x88\x79\x30\xd4\x49\xb3\x3c\x94\xab\x72\xb3\x8d\x7d\xf2"
      "\x06\x61\x6b\xe6\x81\xad\x19\xd0\xcc\xa6\x92\x93\x7b\xfd\x9d\x59\x0d\x17"
      "\xfa\xd0\x32\x46\x01\x80\x4d\xd7\xd9\xab\xe4\x12\xe8\xcb\x58\x89\x4d\x89"
      "\x79\x2f\x55\x9a\xdc\x57\xb4\x8a\xb8\xac\xc5\x96\x01\x72\x6e\x69\xea\x53"
      "\xde\x83\x63\xa2\x4e\x90\x7f\x74\x17\x35\x8c\x06\x88\xee\x15\x4d\x71\x70"
      "\xae\x2e\xde\x1e\xe7\x40\xf7\x2c\x10\x2e\x91\x62\xf8\x63\xa3\x1f\x3c\xba"
      "\x0f\x9a\xcc\x57\x8f\x13\x34\x33\x21\x65\x16\x66\x16\x7d\x8f\x70\x25\x2f"
      "\xa6\xea\x02\xba\xc5\x46\x06\x3d\xdd\x5f\x2d\x69\xaa\x0f\x42\x19\xc9\x69"
      "\xc0\x87\xed\x05\x70\xaf\xb3\xb1\xab\x7c\x09\xba\x1c\xa8\xc6\xda\xb9\xa4"
      "\x92\xe8\x7a\x9f\x1a\x52\x44\xc9\xda\x6d\xe7\xca\xa4\x98\x73\x28\x22\x29"
      "\xb9\xe8\x4b\xf1\x8e\x44\xde\x94\x53\x6c\xcf\x00\x13\x8a\x09\x09\xa8\x96"
      "\x64\xf3\x8d\xda\xd0\x1b\xce\x87\x28\xa4\x25\x08\x0f\xdb\x71\x7e\x67\xb3"
      "\xf4\x43\xf0\x4c\xe8\x6b\x2d\xae\xef\xdd\x21\x7f\x1e\x87\x57\x9a\x6a\xfc"
      "\x3a\xfc\x8d\xb7\x47\x54\x4a\x87\xb0\x08\x31\xf4\x7d\x7b\xa2\x09\xfb\xbf"
      "\x5f\x57\x86\x5a\x66\x22\x73\x58\x6e\xac\xf0\x26\xd9\x8e\xfc\x80\x52\x0d"
      "\xc2\x07\x60\x2b\xa8\x1f\x1e\xcf\x35\x09\xda\x82\x2a\xb8\x4c\x42\x9c\xa1"
      "\xcc\xcb\x0b\x8d\xdd\x15\x02\xcb\xa1\x3d\x0b\x76\x57\x8e\xc7\xe6\xae\x03"
      "\x17\x37\x85\xb4\x3a\x05\x34\xdd\x39\x98\x19\x09\xba\x56\x47\xf2\xe0\xa3"
      "\x07\xb6\x1b\xcd\xe4\xfd\x1c\x67\xdd\x94\x74\x03\xb6\xf4\x4c\xea\x92\xdd"
      "\x8a\x0e\x9b\xe8\x9a\xef\xd6\x6a\x6d\x2c\x8b\x92\x91\x60\xbc\xaf\x42\x45"
      "\xd8\x0c\x17\x2b\x52\xce\x0d\xe8\xd7\x01\x49\x11\xba\x84\xb6\x3a\x81\xe0"
      "\xe5\x81\x8c\x17\x71\x26\xa8\x4a\xfb\xc2\xc5\xf0\xe8\xae\xe9\x10\x8a\xa3"
      "\x14\x37\x80\x0b\x17\xdb\x26\x90\x76\x13\x50\x3c\x3d\x58\xa7\x46\x0b\x36"
      "\x39\x5f\x2b\x9c\x74\x28\xd8\x07\x21\x9f\x85\xb9\xe9\xf8\xaa\x1b\x03\x9e"
      "\xa4\xe5\x93\x5b\x80\xca\xe0\x68\x3e\x20\xd3\x4b\x66\x07\xa4\xdc\xe9\xae"
      "\x3d\x3b\x15\xab\xae\x83\x14\x30\x99\xaa\x90\xb6\x5b\x71\x80\x00\x98\x50"
      "\x1b\x28\x42",
      3279);
  syscall(__NR_write, r[0], 0x20000100ul, 0xd27ul);
}
int main(void)
{
  syscall(__NR_mmap, 0x1ffff000ul, 0x1000ul, 0ul, 0x32ul, -1, 0ul);
  syscall(__NR_mmap, 0x20000000ul, 0x1000000ul, 7ul, 0x32ul, -1, 0ul);
  syscall(__NR_mmap, 0x21000000ul, 0x1000ul, 0ul, 0x32ul, -1, 0ul);
  do_sandbox_none();
  return 0;
}
