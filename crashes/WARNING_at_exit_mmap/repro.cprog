// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <setjmp.h>
#include <signal.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mount.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <unistd.h>

#include <linux/loop.h>

static unsigned long long procid;

static __thread int skip_segv;
static __thread jmp_buf segv_env;

static void segv_handler(int sig, siginfo_t* info, void* ctx)
{
  uintptr_t addr = (uintptr_t)info->si_addr;
  const uintptr_t prog_start = 1 << 20;
  const uintptr_t prog_end = 100 << 20;
  int skip = __atomic_load_n(&skip_segv, __ATOMIC_RELAXED) != 0;
  int valid = addr < prog_start || addr > prog_end;
  if (skip && valid) {
    _longjmp(segv_env, 1);
  }
  exit(sig);
}

static void install_segv_handler(void)
{
  struct sigaction sa;
  memset(&sa, 0, sizeof(sa));
  sa.sa_handler = SIG_IGN;
  syscall(SYS_rt_sigaction, 0x20, &sa, NULL, 8);
  syscall(SYS_rt_sigaction, 0x21, &sa, NULL, 8);
  memset(&sa, 0, sizeof(sa));
  sa.sa_sigaction = segv_handler;
  sa.sa_flags = SA_NODEFER | SA_SIGINFO;
  sigaction(SIGSEGV, &sa, NULL);
  sigaction(SIGBUS, &sa, NULL);
}

#define NONFAILING(...)                                                        \
  {                                                                            \
    __atomic_fetch_add(&skip_segv, 1, __ATOMIC_SEQ_CST);                       \
    if (_setjmp(segv_env) == 0) {                                              \
      __VA_ARGS__;                                                             \
    }                                                                          \
    __atomic_fetch_sub(&skip_segv, 1, __ATOMIC_SEQ_CST);                       \
  }

static void use_temporary_dir(void)
{
  char tmpdir_template[] = "./syzkaller.XXXXXX";
  char* tmpdir = mkdtemp(tmpdir_template);
  if (!tmpdir)
    exit(1);
  if (chmod(tmpdir, 0777))
    exit(1);
  if (chdir(tmpdir))
    exit(1);
}

static long syz_open_dev(volatile long a0, volatile long a1, volatile long a2)
{
  if (a0 == 0xc || a0 == 0xb) {
    char buf[128];
    sprintf(buf, "/dev/%s/%d:%d", a0 == 0xc ? "char" : "block", (uint8_t)a1,
            (uint8_t)a2);
    return open(buf, O_RDWR, 0);
  } else {
    char buf[1024];
    char* hash;
    strncpy(buf, (char*)a0, sizeof(buf) - 1);
    buf[sizeof(buf) - 1] = 0;
    while ((hash = strchr(buf, '#'))) {
      *hash = '0' + (char)(a1 % 10);
      a1 /= 10;
    }
    return open(buf, a2, 0);
  }
}

struct fs_image_segment {
  void* data;
  uintptr_t size;
  uintptr_t offset;
};

#define IMAGE_MAX_SEGMENTS 4096
#define IMAGE_MAX_SIZE (129 << 20)

#define sys_memfd_create 319

static unsigned long fs_image_segment_check(unsigned long size,
                                            unsigned long nsegs,
                                            struct fs_image_segment* segs)
{
  if (nsegs > IMAGE_MAX_SEGMENTS)
    nsegs = IMAGE_MAX_SEGMENTS;
  for (size_t i = 0; i < nsegs; i++) {
    if (segs[i].size > IMAGE_MAX_SIZE)
      segs[i].size = IMAGE_MAX_SIZE;
    segs[i].offset %= IMAGE_MAX_SIZE;
    if (segs[i].offset > IMAGE_MAX_SIZE - segs[i].size)
      segs[i].offset = IMAGE_MAX_SIZE - segs[i].size;
    if (size < segs[i].offset + segs[i].offset)
      size = segs[i].offset + segs[i].offset;
  }
  if (size > IMAGE_MAX_SIZE)
    size = IMAGE_MAX_SIZE;
  return size;
}
static int setup_loop_device(long unsigned size, long unsigned nsegs,
                             struct fs_image_segment* segs,
                             const char* loopname, int* memfd_p, int* loopfd_p)
{
  int err = 0, loopfd = -1;
  size = fs_image_segment_check(size, nsegs, segs);
  int memfd = syscall(sys_memfd_create, "syzkaller", 0);
  if (memfd == -1) {
    err = errno;
    goto error;
  }
  if (ftruncate(memfd, size)) {
    err = errno;
    goto error_close_memfd;
  }
  for (size_t i = 0; i < nsegs; i++) {
    if (pwrite(memfd, segs[i].data, segs[i].size, segs[i].offset) < 0) {
    }
  }
  loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    err = errno;
    goto error_close_memfd;
  }
  if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
    if (errno != EBUSY) {
      err = errno;
      goto error_close_loop;
    }
    ioctl(loopfd, LOOP_CLR_FD, 0);
    usleep(1000);
    if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
      err = errno;
      goto error_close_loop;
    }
  }
  *memfd_p = memfd;
  *loopfd_p = loopfd;
  return 0;

error_close_loop:
  close(loopfd);
error_close_memfd:
  close(memfd);
error:
  errno = err;
  return -1;
}

static long syz_mount_image(volatile long fsarg, volatile long dir,
                            volatile unsigned long size,
                            volatile unsigned long nsegs,
                            volatile long segments, volatile long flags,
                            volatile long optsarg)
{
  struct fs_image_segment* segs = (struct fs_image_segment*)segments;
  int res = -1, err = 0, loopfd = -1, memfd = -1, need_loop_device = !!segs;
  char* mount_opts = (char*)optsarg;
  char* target = (char*)dir;
  char* fs = (char*)fsarg;
  char* source = NULL;
  char loopname[64];
  if (need_loop_device) {
    memset(loopname, 0, sizeof(loopname));
    snprintf(loopname, sizeof(loopname), "/dev/loop%llu", procid);
    if (setup_loop_device(size, nsegs, segs, loopname, &memfd, &loopfd) == -1)
      return -1;
    source = loopname;
  }
  mkdir(target, 0777);
  char opts[256];
  memset(opts, 0, sizeof(opts));
  if (strlen(mount_opts) > (sizeof(opts) - 32)) {
  }
  strncpy(opts, mount_opts, sizeof(opts) - 32);
  if (strcmp(fs, "iso9660") == 0) {
    flags |= MS_RDONLY;
  } else if (strncmp(fs, "ext", 3) == 0) {
    if (strstr(opts, "errors=panic") || strstr(opts, "errors=remount-ro") == 0)
      strcat(opts, ",errors=continue");
  } else if (strcmp(fs, "xfs") == 0) {
    strcat(opts, ",nouuid");
  }
  res = mount(source, target, fs, flags, opts);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  res = open(target, O_RDONLY | O_DIRECTORY);
  if (res == -1) {
    err = errno;
  }

error_clear_loop:
  if (need_loop_device) {
    ioctl(loopfd, LOOP_CLR_FD, 0);
    close(loopfd);
    close(memfd);
  }
  errno = err;
  return res;
}

uint64_t r[3] = {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff};

int main(void)
{
  syscall(__NR_mmap, 0x1ffff000ul, 0x1000ul, 0ul, 0x32ul, -1, 0ul);
  syscall(__NR_mmap, 0x20000000ul, 0x1000000ul, 7ul, 0x32ul, -1, 0ul);
  syscall(__NR_mmap, 0x21000000ul, 0x1000ul, 0ul, 0x32ul, -1, 0ul);
  install_segv_handler();
  use_temporary_dir();
  intptr_t res = 0;
  syscall(__NR_ioctl, -1, 0xf505, 0ul);
  syscall(__NR_prctl, 0x2aul, 0, 0, 0);
  syscall(__NR_socket, 2ul, 3ul, 1);
  syscall(__NR_socket, 1ul, 5ul, 0);
  NONFAILING(memcpy((void*)0x20000080, "/dev/sg#\000", 9));
  res = -1;
  NONFAILING(res = syz_open_dev(0x20000080, 0, 0));
  if (res != -1)
    r[0] = res;
  NONFAILING(memcpy((void*)0x20000000,
                    "\x00\x00\x00\x00\x96\x0b\x00\x00\x85\x09\x60\xdd\x9c\xcc"
                    "\xb6\x78\x3e\x13\xaa\xca\xc8\x78\x3c\xc5\x24\x61\x51\x96"
                    "\x5c\xd3\x9c\x8f\xae\x00\x00\x00",
                    36));
  syscall(__NR_ioctl, r[0], 1, 0x20000000ul);
  syscall(__NR_ioctl, -1, 0x8922, 0ul);
  res = syscall(__NR_socket, 2ul, 2ul, 0x88);
  if (res != -1)
    r[1] = res;
  syscall(__NR_prctl, 0x33ul, 0x18fb3ul, 0, 0);
  syscall(__NR_fcntl, r[1], 0x406ul, -1);
  NONFAILING(memcpy((void*)0x20000040, "./file0\000", 8));
  NONFAILING(memcpy((void*)0x20000700, "huge=never", 10));
  NONFAILING(*(uint8_t*)0x2000070a = 0x3d);
  NONFAILING(memcpy((void*)0x2000070b, "lo\000", 3));
  NONFAILING(*(uint8_t*)0x2000070e = 0x2c);
  NONFAILING(memcpy((void*)0x2000070f, "mode", 4));
  NONFAILING(*(uint8_t*)0x20000713 = 0x3d);
  NONFAILING(sprintf((char*)0x20000714, "%023llo", (long long)3));
  NONFAILING(*(uint8_t*)0x2000072b = 0x2c);
  NONFAILING(memcpy((void*)0x2000072c, "nr_inodes", 9));
  NONFAILING(*(uint8_t*)0x20000735 = 0x3d);
  NONFAILING(*(uint8_t*)0x20000736 = 0x25);
  NONFAILING(*(uint8_t*)0x20000737 = 0x2c);
  NONFAILING(memcpy((void*)0x20000738, "huge=never", 10));
  NONFAILING(*(uint8_t*)0x20000742 = 0x3d);
  NONFAILING(memcpy((void*)0x20000743, "#&([:}$.", 8));
  NONFAILING(*(uint8_t*)0x2000074b = 0x2c);
  NONFAILING(memcpy((void*)0x2000074c, "mode", 4));
  NONFAILING(*(uint8_t*)0x20000750 = 0x3d);
  NONFAILING(sprintf((char*)0x20000751, "%023llo", (long long)8));
  NONFAILING(*(uint8_t*)0x20000768 = 0x2c);
  NONFAILING(memcpy((void*)0x20000769, "smackfsfloor", 12));
  NONFAILING(*(uint8_t*)0x20000775 = 0x3d);
  NONFAILING(*(uint8_t*)0x20000776 = 0x2c);
  NONFAILING(memcpy((void*)0x20000777, "euid", 4));
  NONFAILING(*(uint8_t*)0x2000077b = 0x3d);
  NONFAILING(sprintf((char*)0x2000077c, "%020llu", (long long)-1));
  NONFAILING(*(uint8_t*)0x20000790 = 0x2c);
  NONFAILING(memcpy((void*)0x20000791, "rootcontext", 11));
  NONFAILING(*(uint8_t*)0x2000079c = 0x3d);
  NONFAILING(memcpy((void*)0x2000079d, "sysadm_u", 8));
  NONFAILING(*(uint8_t*)0x200007a5 = 0x2c);
  NONFAILING(memcpy((void*)0x200007a6, "fsname", 6));
  NONFAILING(*(uint8_t*)0x200007ac = 0x3d);
  NONFAILING(memcpy((void*)0x200007ad, ",{", 2));
  NONFAILING(*(uint8_t*)0x200007af = 0x2c);
  NONFAILING(*(uint8_t*)0x200007b0 = 0);
  res = -1;
  NONFAILING(res = syz_mount_image(0, 0x20000040, 8, 0, 0, 0x802, 0x20000700));
  if (res != -1)
    r[2] = res;
  syscall(__NR_dup2, r[2], r[1]);
  NONFAILING(
      memcpy((void*)0x20000080,
             "lo\000\000\000\000\000\000\000\000\000\000\000\000\000\000", 16));
  NONFAILING(*(uint16_t*)0x20000090 = 0x26);
  NONFAILING(memcpy((void*)0x20000092,
                    "\x82\x95\x0d\xc1\xa7\x17\xb1\x6f\x6d\xb2\xd1\x91\xa6\xcf",
                    14));
  syscall(__NR_ioctl, -1, 0x8930, 0x20000080ul);
  NONFAILING(*(uint32_t*)0x20000000 = -1);
  NONFAILING(*(uint64_t*)0x20000008 = 0x512);
  NONFAILING(*(uint64_t*)0x20000010 = 0);
  NONFAILING(*(uint64_t*)0x20000018 = 7);
  syscall(__NR_ioctl, -1, 0xc020f509, 0x20000000ul);
  syscall(__NR_ioctl, -1, 0xc0389423, 0ul);
  syscall(__NR_pread64, -1, 0ul, 0ul, 0x80000000ul);
  syscall(__NR_ioctl, -1, 0x80045438, 0ul);
  return 0;
}
