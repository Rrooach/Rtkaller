// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <endian.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <unistd.h>

#define BITMASK(bf_off, bf_len) (((1ull << (bf_len)) - 1) << (bf_off))
#define STORE_BY_BITMASK(type, htobe, addr, val, bf_off, bf_len)               \
  *(type*)(addr) =                                                             \
      htobe((htobe(*(type*)(addr)) & ~BITMASK((bf_off), (bf_len))) |           \
            (((type)(val) << (bf_off)) & BITMASK((bf_off), (bf_len))))

uint64_t r[2] = {0xffffffffffffffff, 0xffffffffffffffff};

int main(void)
{
  syscall(__NR_mmap, 0x1ffff000ul, 0x1000ul, 0ul, 0x32ul, -1, 0ul);
  syscall(__NR_mmap, 0x20000000ul, 0x1000000ul, 7ul, 0x32ul, -1, 0ul);
  syscall(__NR_mmap, 0x21000000ul, 0x1000ul, 0ul, 0x32ul, -1, 0ul);
  intptr_t res = 0;
  memcpy((void*)0x20000100, "./file0\000", 8);
  syscall(__NR_mkdirat, 0xffffff9c, 0x20000100ul, 0ul);
  memcpy((void*)0x20000240, "./file0\000", 8);
  memcpy((void*)0x200000c0, "anon_inodefs\000", 13);
  syscall(__NR_mount, 0ul, 0x20000240ul, 0x200000c0ul, 0ul, 0ul);
  *(uint32_t*)0x200000c0 = 1;
  *(uint32_t*)0x200000c4 = 0x70;
  *(uint8_t*)0x200000c8 = 2;
  *(uint8_t*)0x200000c9 = 0;
  *(uint8_t*)0x200000ca = 0;
  *(uint8_t*)0x200000cb = 0;
  *(uint32_t*)0x200000cc = 0;
  *(uint64_t*)0x200000d0 = 0;
  *(uint64_t*)0x200000d8 = 0;
  *(uint64_t*)0x200000e0 = 0;
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 0, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 1, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 2, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 3, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 4, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 5, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 6, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 7, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 8, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 9, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 10, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 11, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 12, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 13, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 14, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 15, 2);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 17, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 18, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 19, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 20, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 21, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 22, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 23, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 24, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 25, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 26, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 27, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 28, 1);
  STORE_BY_BITMASK(uint64_t, , 0x200000e8, 0, 29, 35);
  *(uint32_t*)0x200000f0 = 0;
  *(uint32_t*)0x200000f4 = 0;
  *(uint64_t*)0x200000f8 = 0;
  *(uint64_t*)0x20000100 = 0;
  *(uint64_t*)0x20000108 = 0;
  *(uint64_t*)0x20000110 = 0;
  *(uint32_t*)0x20000118 = 0;
  *(uint32_t*)0x2000011c = 0;
  *(uint64_t*)0x20000120 = 0;
  *(uint32_t*)0x20000128 = 0;
  *(uint16_t*)0x2000012c = 0;
  *(uint16_t*)0x2000012e = 0;
  res = syscall(__NR_perf_event_open, 0x200000c0ul, 0, 0ul, -1, 0ul);
  if (res != -1)
    r[0] = res;
  res = syscall(__NR_dup2, -1, -1);
  if (res != -1)
    r[1] = res;
  syscall(__NR_open, 0ul, 0x42ul, 0ul);
  syscall(__NR_ioctl, r[1], 0x4b60, 0ul);
  syscall(__NR_fchown, r[0], 0, 0xee00);
  return 0;
}
